# USING SHARED PREFERENCES:

1. Store a value:

SharedPreferences.getInstance().then((prefs) {
prefs.setString('name', entryName);
});

2. Retrieve a value:

  2.1 Initialize a initState() method:

    @override
    void initState() {
    super.initState();
    getName();
    }

  2.2 Create a getName() method:

    void getName() async {
    SharedPreferences.getInstance().then((prefs) {
    var fName = prefs.getString('name');
    if (fName != null) {
    setState(() {
      finalName = fName;
    });
    } else {
    setState(() {
      finalName = 'No Entry Found';
    });
    }
    });
    }

3. Update a value:

    SharedPreferences.getInstance().then((prefs) {
    prefs.setString('name', entryName);
    });

4. Delete a value:

    onPressed: () async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.remove('name');
    },



# STORE DATA LOCALLY IN FLUTTER:

1. SharedPreferences: This is the easiest method to implement for a beginner. The shared_preferences package is straightforward and suitable for storing simple key-value pairs, such as user preferences or settings.

2. Files: Working with files using the dart:io library is also relatively easy. You can read and write data to files in a specific format, like JSON or CSV. It's a good option for storing data that needs to be accessed directly from files.

3. Hive: Hive is a beginner-friendly NoSQL database package written in pure Dart. It's relatively easy to set up and use, making it a good choice for small to medium-sized datasets.

4. Local Database (SQLite): Using SQLite with the sqflite package is a bit more complex compared to the above methods. It involves working with relational databases and SQL queries. While it's not overly difficult, it requires understanding database concepts.